name: release-n-deploy

on:
  push:
    tags:
      - "v*.*" # Trigger on push with tags matching a version, e.g.: v1.0, v0.1.5

jobs:
  deploy-test-pypi:
    name: Deploy to Test PyPI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build
        run: python setup.py sdist bdist_wheel

      - name: Twine check
        run: twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@master
        with:
          name: package-artifacts
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/

      # Sleep for some seconds to give Test PyPI time to update the search index
      - name: Sleep for 120 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '120s'

  verify-test-pypi:
    name: Install from Test PyPI
    runs-on: ubuntu-latest
    needs: [deploy-test-pypi]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.x"

      - name: Get release version
        id: release_version
        run: |
          echo ::set-output name=number::${GITHUB_REF#refs/*/}
          echo ${{ steps.release_version.outputs.number }}

      - name: Install torch-lr-finder ${{ steps.release_version.outputs.number }} from Test PyPI
        run: |
          python -m pip install --upgrade pip
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple torch-lr-finder==${{ steps.release_version.outputs.number }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [verify-test-pypi]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # We need the whole history so we can later generate the release notes from the commit logs
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      # Generate draft release notes by taking the commit logs between  this release and the previous
      - name: Generate draft release notes
        id: release_notes
        run: |
          # Get the whole commit log with a pretty and easy to post-process format
          notes="$(git log --pretty=format:' -%d%Creset %s' --abbrev-commit)"

          # Get commit logs between this tag and the previous one
          notes="$(awk '/tag: v/ { flag=!flag; count+=1; next } flag && count < 2 {print}' <<< "$notes")"

          # Remove all merge commits for a cleaner log
          notes="$(sed '/Merge pull request #/d' <<< "$notes")"

          # Some weird string replacements to escape special characters...blame GitHub
          # for this https://github.community/t5/GitHub-Actions/set-output-Truncates-Multiline-Strings/td-p/37870
          notes="${notes//'%'/'%25'}"
          notes="${notes//$'\n'/'%0A'}"
          notes="${notes//$'\r'/'%0D'}"

          echo "::set-output name=content::$notes"

      - name: Create draft release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release notes:
            ${{ steps.release_notes.outputs.content }}
          draft: true
          prerelease: false

  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [verify-test-pypi]

    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@master
        with:
          name: package-artifacts
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
