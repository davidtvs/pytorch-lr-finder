name: release-n-deploy

on:
  push:
    branches: [dev/release-action]
  #push:
  #  tags:
  #    - "v*.*" # Trigger on push with tags matching v*, i.e. v1.0, v0.1.5

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # Number of commits to fetch. 0 indicates all history. We need all history so
          # we can later generate the release notes from the commit logs
          fetch-depth: 0

      # Generate draft release notes by taking the commit logs between  this release and the previous
      - name: Generate draft release notes
        id: release_notes
        run: |
          # Get commit log
          notes=$(git log --pretty=format:' -%d%Creset %s' --abbrev-commit)

          # Some weird string replacements to escape special characters...blame GitHub
          # for this https://github.community/t5/GitHub-Actions/set-output-Truncates-Multiline-Strings/td-p/37870
          # and yes, this must be done before the first echo otherwise the logs gets truncated
          notes="${notes//'%'/'%25'}"
          notes="${notes//$'\n'/'%0A'}"
          notes="${notes//$'\r'/'%0D'}"

          # Get commit logs between this tag and the previous one
          notes=$(echo "$notes" | awk '/tag: v/ { flag=!flag; count+=1; next } flag && count < 2 {print}')

          # Remove all merge commits for a cleaner log
          notes=$(echo "$notes" | sed  '/Merge pull request #/d')

          echo "::set-output name=content::$notes"

      - name: Create draft release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release notes:
            ${{ steps.release_notes.outputs.content }}
          draft: true
          prerelease: false
#  deploy:
#    name: Deploy to PyPI
#    runs-on: ubuntu-latest#
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v1
#        with:
#          python-version: "3.x"
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools wheel twine
#      - name: Build and publish
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          python setup.py sdist bdist_wheel
#          twine upload dist/*
